(function(e){function t(t){for(var r,i,l=t[0],s=t[1],c=t[2],d=0,p=[];d<l.length;d++)i=l[d],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&p.push(o[i][0]),o[i]=0;for(r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r]);u&&u(t);while(p.length)p.shift()();return a.push.apply(a,c||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,l=1;l<n.length;l++){var s=n[l];0!==o[s]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={app:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var l=window["webpackJsonp"]=window["webpackJsonp"]||[],s=l.push.bind(l);l.push=t,l=l.slice();for(var c=0;c<l.length;c++)t(l[c]);var u=s;a.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("56d7")},"034f":function(e,t,n){"use strict";n("85ec")},"03f2":function(e,t,n){"use strict";n("9c5d")},5056:function(e){e.exports=JSON.parse('["aerialway","airfield","airport","alcohol-shop","american-football","amusement-park","animal-shelter","aquarium","arrow","art-gallery","attraction","bakery","bank-JP","bank","bar","barrier","baseball","basketball","bbq","beach","beer","bicycle-share","bicycle","blood-bank","bowling-alley","bridge","building-alt1","building","bus","cafe","campsite","car-rental","car-repair","car","casino","castle-JP","castle","caution","cemetery-JP","cemetery","charging-station","cinema","circle-stroked","circle","city","clothing-store","college-JP","college","commercial","communications-tower","confectionery","construction","convenience","cricket","cross","dam","danger","defibrillator","dentist","diamond","doctor","dog-park","drinking-water","elevator","embassy","emergency-phone","entrance-alt1","entrance","farm","fast-food","fence","ferry-JP","ferry","fire-station-JP","fire-station","fitness-centre","florist","fuel","furniture","gaming","garden-centre","garden","gift","globe","golf","grocery","hairdresser","harbor","hardware","heart","heliport","highway-rest-area","home","horse-riding","hospital-JP","hospital","hot-spring","ice-cream","industry","information","jewelry-store","karaoke","landmark-JP","landmark","landuse","laundry","library","lighthouse-JP","lighthouse","lodging","logging","marker-stroked","marker","mobile-phone","monument-JP","monument","mountain","museum","music","natural","observation-tower","optician","paint","park-alt1","park","parking-garage","parking","pharmacy","picnic-site","pitch","place-of-worship","playground","police-JP","police","post-JP","post","prison","racetrack-boat","racetrack-cycling","racetrack-horse","racetrack","rail-light","rail-metro","rail","ranger-station","recycling","religious-buddhist","religious-christian","religious-jewish","religious-muslim","religious-shinto","residential-community","restaurant-bbq","restaurant-noodle","restaurant-pizza","restaurant-seafood","restaurant-sushi","restaurant","road-accident","roadblock","rocket","school-JP","school","scooter","shelter","shoe","shop","skateboard","skiing","slaughterhouse","slipway","snowmobile","soccer","square-stroked","square","stadium","star-stroked","star","suitcase","swimming","table-tennis","teahouse","telephone","tennis","theatre","toilet","town-hall","town","triangle-stroked","triangle","veterinary","viewpoint","village","volcano","volleyball","warehouse","waste-basket","watch","water","waterfall","watermill","wetland","wheelchair","windmill","zoo"]')},"56d7":function(e,t,n){"use strict";n.r(t);n("e260"),n("e6cf"),n("cca6"),n("a79d");var r=n("2b0e"),o=n("ce5b"),a=n.n(o);n("bf40");r["default"].use(a.a);var i={},l=new a.a(i),s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"app"}},[n("map-control",{attrs:{config:e.config}})],1)},c=[],u=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-app",[n("v-main",[n("div",{attrs:{id:"container"}},[n("div",{staticClass:"row"},[n("map-map-control",{ref:"mapMapControl",attrs:{config:e.config}})],1),n("div",{staticClass:"row form"},[n("v-form",[n("v-card",[n("div",{staticClass:"text-overline mb-4"},[e._v("MAP SETTINGS")]),n("v-card-text",[n("v-text-field",{attrs:{label:"Map Title"},model:{value:e.title,callback:function(t){e.title=t},expression:"title"}}),n("v-switch",{staticStyle:{"margin-top":"0em"},attrs:{label:"Constrain Map Extent"},model:{value:e.constrainBoundsEnabled,callback:function(t){e.constrainBoundsEnabled=t},expression:"constrainBoundsEnabled"}}),n("v-switch",{staticStyle:{"margin-top":"0em"},attrs:{disabled:e.constrainBoundsEnabled,label:"Locatieserver Control"},model:{value:e.lsControlEnabled,callback:function(t){e.lsControlEnabled=t},expression:"lsControlEnabled"}})],1),n("v-card-actions",[n("v-btn",{on:{click:function(t){return e.updateMap()}}},[e._v("Update Map")]),n("v-btn",{attrs:{color:"primary"},on:{click:function(t){return e.generateHTML()}}},[e._v("Download HTML")])],1)],1),n("v-card",[n("v-list-item-content",{staticStyle:{"padding-bottom":"0px"}},[n("div",{staticClass:"text-overline mb-4"},[e._v("LAYERS")]),e.addingServiceLayer||e.addingFeatureLayer?e._e():n("v-card-actions",[n("v-btn",{on:{click:function(t){e.orderLayersEnabled=!e.orderLayersEnabled}}},[n("v-icon",[e._v(" mdi-reorder-horizontal")])],1),n("v-speed-dial",{attrs:{direction:"right"},scopedSlots:e._u([{key:"activator",fn:function(){return[n("v-btn",{attrs:{color:"blue darken-2",dark:""}},[n("v-icon",[e._v(" mdi-plus ")])],1)]},proxy:!0}],null,!1,2587585864)},[n("v-btn",{attrs:{dark:"",small:""},on:{click:function(t){e.newLayer=e.newServiceLayer(),e.addingServiceLayer=!0}}},[e._v(" + Service Layer ")]),n("v-btn",{attrs:{dark:"",small:""},on:{click:function(t){e.newLayer=e.newFeatureLayer(),e.addingFeatureLayer=!0}}},[e._v(" + Feature Layer ")])],1)],1),e.addingServiceLayer||e.addingFeatureLayer?n("div",{staticStyle:{width:"50vw",padding:"0 24px 16px"}},[e.addingServiceLayer?n("service-layer-list-item",{attrs:{layer:e.newLayer}}):e._e(),e.addingFeatureLayer?n("feature-layer-list-item",{attrs:{layer:e.newLayer}}):e._e(),n("v-card-actions",[n("v-btn",{attrs:{color:"primary"},on:{click:function(t){return e.addNewLayer()}}},[e._v("OK")]),n("v-btn",{on:{click:function(t){e.addingServiceLayer?e.addingServiceLayer=!e.addingServiceLayer:e.addingFeatureLayer=!e.addingFeatureLayer}}},[e._v("Cancel")])],1)],1):e._e(),e.addingServiceLayer||e.addingFeatureLayer?e._e():n("v-expansion-panels",{attrs:{accordion:"",disabled:e.orderLayersEnabled}},[n("draggable",{attrs:{disabled:!e.orderLayersEnabled},model:{value:e.layers,callback:function(t){e.layers=t},expression:"layers"}},[n("transition-group",e._l(e.layers,(function(t){return n("layer-list-item",{key:t.id,attrs:{layer:t},on:{deleteLayer:e.onDeleteLayer}})})),1)],1)],1)],1)],1)],1)],1)])])],1)},d=[],p=(n("4de4"),n("d3b7"),n("25f0"),n("b76a")),f=n.n(p),y=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-expansion-panel",[n("v-expansion-panel-header",[e._v(" "+e._s(e.layer.title)+" ")]),n("v-expansion-panel-content",["serviceLayer"===e.layer.layerType?n("service-layer-list-item",{attrs:{layer:e.layer}}):e._e(),"featureLayer"===e.layer.layerType?n("feature-layer-list-item",{attrs:{layer:e.layer}}):e._e(),n("v-card-actions",[n("v-btn",{attrs:{title:"Delete Layer"},on:{click:function(t){return e.deleteLayer()}}},[n("v-icon",[e._v(" mdi-delete ")])],1)],1)],1)],1)},g=[],m=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("v-text-field",{attrs:{label:"Layer Title"},model:{value:e.title,callback:function(t){e.title=t},expression:"title"}}),n("v-switch",{staticStyle:{"margin-top":"0em"},attrs:{label:"Auto-Update Title"},model:{value:e.autoUpdateTitle,callback:function(t){e.autoUpdateTitle=t},expression:"autoUpdateTitle"}}),n("v-text-field",{attrs:{disabled:"",label:"Service Type"},model:{value:e.serviceType,callback:function(t){e.serviceType=t},expression:"serviceType"}}),n("v-text-field",{ref:"serviceUrl",attrs:{label:"Service URL",rules:e.serviceUrlRules,required:""},model:{value:e.serviceUrl,callback:function(t){e.serviceUrl=t},expression:"serviceUrl"}}),n("v-select",{attrs:{items:e.layers,"item-text":"Title",label:"Layer Name","return-object":""},model:{value:e.selectedLayer,callback:function(t){e.selectedLayer=t},expression:"selectedLayer"}}),"WMS"===e.serviceType?n("v-select",{attrs:{items:e.selectedLayer.Style,"item-text":"Title","return-object":"",label:"Style"},model:{value:e.selectedStyle,callback:function(t){e.selectedStyle=t},expression:"selectedStyle"}}):e._e(),n("v-slider",{attrs:{step:"0.01",min:"0",max:"1","thumb-label":"",label:"Opacity"},model:{value:e.opacity,callback:function(t){e.opacity=t},expression:"opacity"}}),n("v-slider",{attrs:{step:"0.01",min:"0",max:"1","thumb-label":"",label:"Grayscale"},model:{value:e.grayscale,callback:function(t){e.grayscale=t},expression:"grayscale"}})],1)},h=[],v=(n("ac1f"),n("00b4"),n("99af"),n("3ca3"),n("ddb0"),n("2b3d"),n("9861"),n("c740"),n("159b"),n("7db0"),n("0481"),n("4069"),n("d81d"),n("caad"),n("2532"),n("41b9")),b=n("2278"),w={components:{},name:"ServiceLayerListItem",props:{layer:Object,autoUpdateTitle:{type:Boolean,default:!0}},data:function(){return{serviceTitle:"",layers:[],styles:[],selectedLayer:{},selectedStyle:{},serviceUrlRules:[function(e){var t=/^https?.*\?.*service=(WMS|WMTS).*$/i;return t.test(e)||"Invalid Service URL, service request parameter required (allowed values: WMS, WMTS)"}]}},computed:{title:{get:function(){return this.layer.title},set:function(e){this.layer.title=e}},serviceUrl:{get:function(){return this.layer.serviceUrl},set:function(e){var t=this;this.layer.serviceUrl=e;var n=this.getServiceType();this.serviceType=n,setTimeout((function(){t.retrieveCapabilities()}),1)}},layerName:{get:function(){return this.layer.layerName},set:function(e){this.layer.layerName=e}},styleName:{get:function(){return this.layer.styleName},set:function(e){this.layer.styleName=e}},opacity:{get:function(){return this.layer.opacity},set:function(e){this.layer.opacity=e}},grayscale:{get:function(){return this.layer.grayscale},set:function(e){this.layer.grayscale=e}},serviceType:{get:function(){return this.layer.serviceType},set:function(e){this.layer.serviceType=e}},serviceUrlValid:{get:function(){var e=/^https?.*\?.*service=(WMS|WMTS).*$/i;return e.test(this.serviceUrl)}}},watch:{selectedLayer:function(e){console.log("selectedLayer",e),"WMS"===this.serviceType?this.layerName=e.Name:this.layerName=e.Identifier,this.autoUpdateTitle&&this.updateTitle()},selectedStyle:function(e){this.styleName=e.Name}},mounted:function(){this.retrieveCapabilities()},beforeMount:function(){"opacity"in this.layer||(this.layer.opacity=1),"grayscale"in this.layer||(this.layer.grayscale=0)},methods:{updateTitle:function(){var e=this.selectedLayer.Title;this.title="".concat(this.serviceTitle," - ").concat(e)},retrieveCapabilities:function(){this.serviceUrlValid&&("WMTS"===this.serviceType?this.retrieveCapabilitiesWMTS():"WMS"===this.serviceType&&this.retrieveCapabilitiesWMS())},retrieveCapabilitiesWMS:function(){var e=this,t=new URL(this.serviceUrl),n="".concat(t.protocol).concat(t.hostname).concat(t.pathname,"?request=GetCapabilities&service=WMS");fetch(n).then((function(e){return e.text()})).then((function(t){e.capXml=t;var n=new v["a"],r=n.read(t),o=[];e.serviceTitle=r.Service.Title,o=e.unpackLayers(r.Capability,o),o=o.filter((function(e,t,n){return n.findIndex((function(t){return t.Name===e.Name}))===t})),o.forEach((function(e){"Style"in e&&(e.Style=e.Style.filter((function(e,t,n){return n.findIndex((function(t){return t.Name===e.Name}))===t})))})),e.layers=o,e.selectedLayer=e.layerName?o.find((function(t){return t.Name===e.layerName})):o[0];var a=[];a=e.parentStyles(r.Capability,a).flat(),e.layers.map((function(e){"Style"in e&&(e.Style=e.Style.filter((function(e){return!a.includes(e)})))})),e.selectedStyle=void 0,"Style"in e.selectedLayer&&(e.selectedStyle=e.styleName?e.selectedLayer.Style.find((function(t){return t.Name===e.styleName})):e.selectedLayer.Style[0]),e.autoUpdateTitle&&e.updateTitle()}))},parentStyles:function(e,t){var n=this;return Array.isArray(e)||(e=[e]),e.forEach((function(e){"Layer"in e&&(t.push(e.Style),n.parentStyles(e.Layer,t))})),t},unpackLayers:function(e,t){var n=this;return Array.isArray(e)||(e=[e]),e.forEach((function(e){"Layer"in e?n.unpackLayers(e.Layer,t):t.push(e)})),t},retrieveCapabilitiesWMTS:function(){var e=this,t=new URL(this.serviceUrl),n="".concat(t.protocol).concat(t.hostname).concat(t.pathname,"?request=GetCapabilities&service=WMTS");fetch(n).then((function(e){return e.text()})).then((function(t){e.capXml=t;var n=new b["a"],r=n.read(t);e.serviceTitle=r.ServiceIdentification.Title;var o=[];o=r.Contents.Layer,e.layers=o,e.selectedLayer=e.layerName?o.find((function(t){return t.Identifier===e.layerName})):o[0],e.autoUpdateTitle&&e.updateTitle()}))},getServiceType:function(){var e=new URL(this.serviceUrl.toUpperCase());return e.searchParams.get("SERVICE")}}},S=w,x=(n("bb52"),n("2877")),C=Object(x["a"])(S,m,h,!1,null,"6e31b858",null),L=C.exports,T=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("v-text-field",{attrs:{label:"Layer Title"},model:{value:e.title,callback:function(t){e.title=t},expression:"title"}}),n("v-radio-group",{model:{value:e.sourceType,callback:function(t){e.sourceType=t},expression:"sourceType"}},[n("v-radio",{attrs:{label:"GeoJSON Document",value:"object"}}),n("v-radio",{attrs:{label:"GeoJSON URL",value:"url"}})],1),"url"===e.sourceType?n("v-text-field",{attrs:{label:"GeoJSON URL"},model:{value:e.geoJsonUrl,callback:function(t){e.geoJsonUrl=t},expression:"geoJsonUrl"}}):e._e(),"object"===e.sourceType?n("v-textarea",{attrs:{label:"GeoJSON Document",hint:"Hint text"},on:{blur:function(t){e.geoJsonString=t.target.value}}}):e._e(),n("v-slider",{attrs:{step:"0.01",min:"0",max:"1","thumb-label":"",label:"Opacity"},model:{value:e.opacity,callback:function(t){e.opacity=t},expression:"opacity"}}),n("v-slider",{attrs:{step:"0.01",min:"0",max:"1","thumb-label":"",label:"Grayscale"},model:{value:e.grayscale,callback:function(t){e.grayscale=t},expression:"grayscale"}}),n("v-color-picker",{attrs:{label:"Style Color","dot-size":"20",mode:"rgba","hide-inputs":""},model:{value:e.color,callback:function(t){e.color=t},expression:"color"}}),n("v-checkbox",{attrs:{label:"Enable Labels"},model:{value:e.labels,callback:function(t){e.labels=t},expression:"labels"}}),n("v-text-field",{attrs:{disabled:!e.labels,label:"Label Property"},model:{value:e.labelProperty,callback:function(t){e.labelProperty=t},expression:"labelProperty"}}),""!==e.geomType&&"Point"!==e.geomType?n("v-slider",{attrs:{step:"1",min:"0",max:"20","thumb-label":"",label:"Stroke Width"},model:{value:e.width,callback:function(t){e.width=t},expression:"width"}}):e._e(),""!==e.geomType&&"Point"!==e.geomType?n("v-text-field",{attrs:{rules:e.strokeRules},model:{value:e.stroke,callback:function(t){e.stroke=t},expression:"stroke"}}):e._e(),""!==e.geomType&&"Point"===e.geomType?n("v-slider",{attrs:{step:"1",min:"0",max:"20","thumb-label":"",label:"Icon Size"},model:{value:e.iconSize,callback:function(t){e.iconSize=t},expression:"iconSize"}}):e._e(),""!==e.geomType&&"Point"===e.geomType?n("v-select",{attrs:{items:e.icons,label:"Icon"},model:{value:e.icon,callback:function(t){e.icon=t},expression:"icon"}}):e._e()],1)},k=[],E=n("1da1"),O=(n("96cf"),n("e9c4"),n("a15b"),n("1276"),n("498a"),n("466d"),n("5319"),n("5056")),M={components:{},name:"FeatureLayerListItem",props:{layer:Object},data:function(){return{icons:O,strokeRules:[function(e){var t=/^^([0-9]+\s?,?){2,}$$/;return t.test(e)||"Invalid stroke, comma seperated integers required"}]}},computed:{sourceType:{get:function(){return this.layer.sourceType},set:function(e){this.layer.sourceType=e}},geoJsonUrl:{get:function(){return this.layer.geoJsonUrl},set:function(e){this.layer.geoJsonUrl=e}},geomType:{get:function(){return this.layer.geomType},set:function(e){this.layer.geomType=e}},geoJsonString:{get:function(){return JSON.stringify(this.geoJson)},set:function(e){console.log("set geoJsonString",e),this.geoJson=JSON.parse(e),this.setSourceGeomType()}},geoJson:{get:function(){return this.layer.geoJson},set:function(e){this.layer.geoJson=e,console.log("set geoJson",e)}},labels:{get:function(){return this.layer.labels},set:function(e){this.layer.labels=e}},labelProperty:{get:function(){return this.layer.labelProperty},set:function(e){this.layer.labelProperty=e}},iconSize:{get:function(){return this.layer.iconSize},set:function(e){this.layer.iconSize=e}},icon:{get:function(){return this.layer.icon},set:function(e){var t=this;console.log("set icon",e),this.layer.icon=e,this.getIcon(e).then((function(e){t.layer.svgIcon=e}))}},title:{get:function(){return this.layer.title},set:function(e){this.layer.title=e}},width:{get:function(){return this.layer.width},set:function(e){this.layer.width=e}},opacity:{get:function(){return this.layer.opacity},set:function(e){this.layer.opacity=e}},grayscale:{get:function(){return this.layer.grayscale},set:function(e){this.layer.grayscale=e}},stroke:{get:function(){return this.layer.stroke?this.layer.stroke.join(","):""},set:function(e){this.layer.stroke=e.split(",").map((function(e){return parseInt(e.trim())}))}},color:{get:function(){var e={r:this.layer.color[0],g:this.layer.color[1],b:this.layer.color[2],a:1};return e},set:function(e){this.layer.color=[e.r,e.g,e.b]}}},mounted:function(){},beforeMount:function(){"opacity"in this.layer||(this.layer.opacity=1),"grayscale"in this.layer||(this.layer.grayscale=0)},watch:{"actLayer.visible":{handler:function(e,t){console.log(e,t)},icon:function(e){console.log("watch icon",e)}}},methods:{getIcon:function(){var e=this;return Object(E["a"])(regeneratorRuntime.mark((function t(){var n,r,o,a,i,l,s;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return console.log("getIcon"),n="./icons/".concat(e.icon,".svg"),t.next=4,fetch(n);case 4:if(r=t.sent,r.ok){t.next=7;break}throw new Error("HTTP error! status: ".concat(r.status));case 7:return t.next=9,r.text();case 9:return o=t.sent,a=/(<path .*?\/>)/,i=o.match(a),l=i[1],s=l.replace("<path",'<path stroke="#ffffffCC" stroke-width="2px"'),o=o.replace(a,"".concat(s,"$&")),o=o.replace('viewBox="0 0 15 15"','viewBox="-2 -2 19 19"'),t.abrupt("return",o.replace(/\n/g,""));case 17:case"end":return t.stop()}}),t)})))()},setSourceGeomType:function(){var e;("object"===this.sourceType||"url"===this.sourceType)&&(e=this.geoJson.features[0].geometry.type);var t=e.replace("Multi","");this.geomType=t}}},j=M,I=(n("ff2b"),Object(x["a"])(j,T,k,!1,null,"21b1d996",null)),P=I.exports,_={components:{ServiceLayerListItem:L,FeatureLayerListItem:P},name:"LayerListItem",props:{layer:Object},computed:{},mounted:function(){},beforeMount:function(){},methods:{deleteLayer:function(){this.$emit("deleteLayer",this.layer)}}},U=_,N=(n("b5f5"),Object(x["a"])(U,y,g,!1,null,"6d411828",null)),D=N.exports,G=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{ref:"map-root",attrs:{id:"map"}}),n("h1",{attrs:{id:"mapTitle"}},[e._v(e._s(e.config.title))])])},W=[],R=n("5530"),J=(n("b0c0"),n("fb6a"),n("9dbb")),F=n.n(J),z=n("b85c"),A=n("d4ec"),H=n("bee2"),V=n("257e"),$=n("262e"),B=n("2caf"),q=n("9072"),Y=n("ade3"),K=(n("2ca0"),n("64d9")),X=n("3900"),Z=n("5831"),Q=n("3e6b"),ee=n("6c77"),te=n("8682"),ne=n("83a6"),re="\nbutton{\n    border: solid 1px #cfd6e6;\n    border-radius: 0 3px 3px 0;\n    border-left: 0px;\n    width: 3em;\n}\n.parentControl{\n    background-color: white;\n    height: 36px;\n}\ninput{\n    outline: none;\n}\ninput[type=text]{\n    border: solid 1px #cfd6e6;\n    border-radius: 3px;\n    width: 21em;\n    padding-left: 0.5em;\n}\n\nselect{\n    border: solid 1px #cfd6e6;\n    border-radius: 3px;\n    width: 10em;\n    padding-left: 0.5em;    \n}\n\ninput[type=checkbox] {\n    transform: scale(1.1);\n}\n\ninput:focus{\n    border: solid 2px #cfd6e6 !important;\n}\n\n#locationServerControl{\n    display: flex;\n    position: absolute;\n    bottom: 2em;\n    right: 2em;\n}\n\n@media only screen and (max-width: 1024px) {\n  #locationServerControl{\n    bottom: 3em;\n    left: 0.5em;\n  }\n}\n",oe='<div id="locationServerControl" class="parentControl">\n    <input autoComplete="off" id="lsInput" class="control" type="text" placeholder="zoek in locatieserver" title="Zoek in PDOK Locatieserver" list="locatie-auto-complete">\n    <datalist id="locatie-auto-complete"></datalist>\n</div>',ae=function(e){Object($["a"])(n,e);var t=Object(B["a"])(n);function n(){var e;Object(A["a"])(this,n),e=t.call(this),Object(Y["a"])(Object(V["a"])(e),"map",{}),Object(Y["a"])(Object(V["a"])(e),"shadow",{});var r=document.createElement("style"),o=document.createElement("template");return r.innerHTML=n.css,o.innerHTML=n.html,e.shadow=e.attachShadow({mode:"open"}),e.shadow.appendChild(r),e.shadow.appendChild(o.content.cloneNode(!0)),e.shadow.getElementById("lsInput").addEventListener("input",(function(t){if("insertReplacementText"===t.inputType||void 0===t.inputType){var r,o=e.shadow.getElementById("locatie-auto-complete").querySelectorAll("option"),a="",i=Object(z["a"])(o);try{for(i.s();!(r=i.n()).done;){var l=r.value;l.value===t.target.value&&(a=l.id)}}catch(s){i.e(s)}finally{i.f()}fetch("".concat(n.url,"/lookup?id=").concat(a,"&fl=id,geometrie_ll")).then((function(e){return e.json()})).then((function(t){var n=t.response.docs[0].geometrie_ll,r=new K["a"],o=r.readFeature(n,{dataProjection:"EPSG:4326",featureProjection:"EPSG:3857"}),a=o.getGeometry().getExtent();e.dispatchEvent(new CustomEvent("location-selected",{bubbles:!0,composed:!0,detail:{extent:a,feature:o}})),e.shadow.getElementById("locatie-auto-complete").innerHTML="",e.shadow.getElementById("lsInput").blur()}))}else t.inputType.startsWith("deleteContent")&&""===t.target.value&&e.dispatchEvent(new CustomEvent("location-cleared",{bubbles:!0,composed:!0,detail:{}}))})),e.shadow.getElementById("lsInput").addEventListener("keyup",(function(t){e.query!==t.target.value&&(e.query=t.target.value,fetch("".concat(n.url,"/suggest?q=").concat(e.query)).then((function(e){return e.json()})).then((function(t){if(t.response.docs.length>0){var n=t.response.docs.map((function(e){return'<option value="'.concat(e.weergavenaam,'" id="').concat(e.id,'">')})),r=n.join("");e.shadow.getElementById("locatie-auto-complete").innerHTML=r}})))})),e}return Object(H["a"])(n,[{key:"map",set:function(e){this.map=e}},{key:"connectedCallback",value:function(){this.shadow.addEventListener("keydown",(function(e){e.stopPropagation()}))}},{key:"locationClearedHandler",value:function(){var e=this.map.getLayers().getArray().find((function(e){return"values_"in e&&e.values_.id===n.layerId}));e&&this.map.removeLayer(e)}},{key:"locationSelectedHandler",value:function(e){var t=n.polygonStyle({color:[255,255,0],stroke:"solid",width:4}),r=new Q["a"]({id:n.layerId,declutter:!0,source:new Z["a"]({features:[e.detail.feature]}),style:new ee["b"](t),opacity:.4,zIndex:9999});this.locationClearedHandler(),this.map.addLayer(r),this.map.getView().fit(e.detail.extent,{maxZoom:18,padding:[30,30,30,30]})}},{key:"enableLsControl",value:function(e){var t=new X["a"]({element:e});this.map.addControl(t),e.addEventListener("location-selected",this.locationSelectedHandler,!1),e.addEventListener("location-cleared",this.locationClearedHandler,!1)}}],[{key:"polygonStyle",value:function(e){var t="rgb(".concat(e.color[0],",").concat(e.color[1],",").concat(e.color[2],")"),n="rgba(".concat(e.color[0],",").concat(e.color[1],",").concat(e.color[2],",0.2)");return"width"in e||(e.width=2),{stroke:new te["a"](Object(R["a"])({},{color:t,width:e.width})),fill:new ne["a"]({color:n})}}},{key:"createLsControl",value:function(){return document.createElement(n.name)}}]),n}(Object(q["a"])(HTMLElement));Object(Y["a"])(ae,"url","https://geodata.nationaalgeoregister.nl/locatieserver/v3"),Object(Y["a"])(ae,"layerId","c2ab2649-c4c2-4ec0-bcb0-ddf9a7eb25bc"),Object(Y["a"])(ae,"css",re),Object(Y["a"])(ae,"html",oe),Object(Y["a"])(ae,"name","locatieserver-control");var ie=n("5eee"),le=(n("5bc0"),n("6cbf")),se=n("8295"),ce=n("c810"),ue=n("6792"),de=n("480c"),pe=n("d510"),fe=n("6ed8"),ye=n("256f"),ge=n("0af5"),me=n("a2e1"),he=2,ve=1.5,be={dashed:{lineDash:[4]},dotted:{lineDash:[1,4,1,4]},"dash-dotted":{lineDash:[9,3,3,3]},solid:{}},we=function(){function e(t,n){Object(A["a"])(this,e),Object(Y["a"])(this,"config",{}),Object(Y["a"])(this,"map",{}),this.config=t,this.map=n}return Object(H["a"])(e,[{key:"updateMapState",value:function(){var e=this.map.getView(),t=e.getCenter(),n=parseFloat(t[0].toString()),r=parseFloat(t[1].toString()),o=parseInt(e.getZoom().toString()),a={location:{x:n,y:r,z:o}};Object.assign(this.config,a)}},{key:"generateMap",value:function(){for(var t=this,n=this.map,r=this.config,o=Object(ye["g"])("EPSG:3857"),a=o.getExtent(),i=Object(ge["D"])(a)/256,l=new Array(19),s=new Array(19),c=0;c<19;++c)l[c]=i/Math.pow(2,c),s[c]=c;var u=[];r.layersString=r.layers.map((function(e){return JSON.stringify(e)})),r.layers.forEach((function(t){u.push(e.getFeatureData(t))}));var d=[];Promise.all(u).then((function(r){var i=0;r.forEach((function(t){if("featureLayer"===t.config.layerType)i+=1,d.push(new Q["a"]({zIndex:i,declutter:!0,source:new Z["a"]({features:new me["a"]({featureProjection:"EPSG:3857"}).readFeatures(t.ftCollection)}),style:e.getStyleFunction(t.config),opacity:t.config.opacity}));else if("serviceLayer"===t.config.layerType)if(i+=1,"WMS"===t.config.serviceType){var n={LAYERS:t.config.layerName};t.config.styleName&&(n=Object(R["a"])(Object(R["a"])({},n),{STYLES:t.config.styleName})),d.push(new ce["a"](Object(R["a"])(Object(R["a"])({zIndex:i,source:new ue["a"]({url:t.config.serviceUrl,params:n,ratio:1})},"grayscale"in t.config&&{grayscale:t.config.grayscale}),"opacity"in t.config&&{opacity:t.config.opacity})))}else"WMTS"===t.config.serviceType&&(i+=1,d.push(new de["a"](Object(R["a"])(Object(R["a"])({zIndex:i,source:new pe["a"]({url:t.config.serviceUrl,layer:t.config.layerName,matrixSet:"EPSG:3857",format:"image/png",projection:o,tileGrid:new fe["b"]({origin:Object(ge["B"])(a),resolutions:l,matrixIds:s}),style:"default",wrapX:!0})},"grayscale"in t.config&&{grayscale:t.config.grayscale}),"opacity"in t.config&&{opacity:t.config.opacity}))))})),n.setLayers(d),n.getLayers().forEach((function(t){var n=t.get("grayscale");n>0&&t.on("postrender",e.postRender)})),n.on("moveend",(function(){t.updateMapState()}))}));var p={center:[564457.416,6783258.6045],zoom:7};r.location&&(p={center:[r.location.x,r.location.y],zoom:r.location.z});var f=new Promise((function(e){e(p)}));n.setView(f),r.constrainBoundsEnabled&&n.once("postrender",(function(){setTimeout((function(){var e=n.getView().calculateExtent(n.getSize());p.extent=e;var t=new Promise((function(e){e(p)}));n.setView(t)}),1)}))}}],[{key:"pointStyle",value:function(e){var t=ve;"iconSize"in e&&(t=e.iconSize);var n=0,r=e.svgIcon.replace(/<path/g,(function(t){return 2===++n?'<path fill="#'.concat(e.hexColor,'"'):t})),o="data:image/svg+xml;utf8,"+escape(r);return{image:new le["a"]({opacity:1,src:o,scale:t})}}},{key:"lineStyle",value:function(t){var n="rgb(".concat(t.color[0],",").concat(t.color[1],",").concat(t.color[2],")"),r=e.getDash(t);return"width"in t||(t.width=he),{stroke:new te["a"](Object(R["a"])(Object(R["a"])({},{color:n,width:t.width}),r))}}},{key:"polygonStyle",value:function(t){var n="rgb(".concat(t.color[0],",").concat(t.color[1],",").concat(t.color[2],")"),r="rgba(".concat(t.color[0],",").concat(t.color[1],",").concat(t.color[2],",0.2)");"width"in t||(t.width=he);var o=e.getDash(t);return{stroke:new te["a"](Object(R["a"])(Object(R["a"])({},{color:n,width:t.width}),o)),fill:new ne["a"]({color:r})}}},{key:"getDash",value:function(e){var t;return t=Array.isArray(e.stroke)?{lineDash:e.stroke}:e.stroke in be?be[e.stroke]:be["solid"],t}},{key:"getStyle",value:function(t){var n={Point:e.pointStyle,LineString:e.lineStyle,Polygon:e.polygonStyle};console.log("getstyle",t);var r=n[t.geomType];return"string"===typeof t.color&&t.color.split(",").length>2&&(t.color=t.color.split(",")),r(t)}},{key:"getStyleFunction",value:function(t){return function(n){var r=e.getStyle(t);if("labels"in t&&t.labels){var o={Point:{offsetX:7,offsetY:-7,textAlign:"start",overflow:!0},Polygon:{textAlign:"center",overflow:!0},LineString:{offsetX:6,offsetY:-6,textAlign:"start"}},a={text:new se["a"](Object(R["a"])(Object(R["a"])({},{text:n.get(t.labelProperty),scale:1.3,fill:new ne["a"]({color:"#000000"}),stroke:new te["a"]({color:"rgba(255, 255, 255, 0.8)",width:3})}),o[t.geomType]))};return new ee["b"](Object(R["a"])(Object(R["a"])({},a),r))}return new ee["b"](r)}}},{key:"isValidHttpUrl",value:function(e){var t;try{t=new URL(e)}catch(n){return!1}return"http:"===t.protocol||"https:"===t.protocol}},{key:"getResourceText",value:function(){var e=Object(E["a"])(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:if(n=e.sent,n.ok){e.next=5;break}throw new Error("HTTP error! status: ".concat(n.status));case 5:return e.next=7,n.text();case 7:return e.abrupt("return",e.sent);case 8:case"end":return e.stop()}}),e)})));function t(t){return e.apply(this,arguments)}return t}()},{key:"getFeatureData",value:function(){var t=Object(E["a"])(regeneratorRuntime.mark((function t(n){var r,o;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:if("featureLayer"!==n.layerType){t.next=12;break}if("url"!==n.sourceType){t.next=8;break}return t.next=4,e.getResourceText(n.geoJsonUrl);case 4:o=t.sent,r=JSON.parse(o),t.next=9;break;case 8:"object"===n.sourceType&&(r=n.geoJson);case 9:return t.abrupt("return",{ftCollection:r,config:n});case 12:return t.abrupt("return",{serviceUrl:n.serviceUrl,config:n});case 13:case"end":return t.stop()}}),t)})));function n(e){return t.apply(this,arguments)}return n}()},{key:"postRender",value:function(e){var t=e.target.get("grayscale");e.context.globalCompositeOperation="color","color"===e.context.globalCompositeOperation&&(e.context.fillStyle="rgba(255,255,255,"+t+")",e.context.fillRect(0,0,e.context.canvas.width,e.context.canvas.height)),e.context.globalCompositeOperation="source-over"}}]),e}(),Se='\x3c!-- Generated with https://github.com/arbakker/ol-map-generator --\x3e\n<!DOCTYPE html>\n<html lang="nl">\n    <head>\n        <meta charset="UTF-8">\n        <title>{{ title }}</title>\n        <script type="module">\n\n{{{ jsCode }}}\n\n        <\/script>\n    </head>\n    <body>\n        <div id="map" class="map"></div>\n        {{#title}}\n        <h1 id="mapTitle">{{ title }}</h1>\n        {{/title}}\n        <link href="https://cdn.jsdelivr.net/npm/ol@6.9.0/ol.css" rel="stylesheet">\n        <style>\n            @import url(https://fonts.googleapis.com/css?family=Quattrocento+Sans:400,400italic,700);\n            body {\n                margin: unset;\n                font-family: \'Quattrocento Sans\', sans-serif;\n                font-size: 16px;\n            }\n            .map {\n                width: 100vw;\n                height: 100vh;\n                z-index: 0;\n            }\n            #mapTitle {\n                position: absolute;\n                left: 1em;\n                bottom: 1em;\n                background-color: #ffffffba;\n                padding: 0.5em;\n            }\n        </style>\n    </body>\n</html>',xe="import { default as ImageLayer } from 'https://esm.run/ol@6.9.0/src/layer/Image';\nimport { default as ImageWMS } from 'https://esm.run/ol@6.9.0/src/source/ImageWMS';\nimport { default as TileLayer } from 'https://esm.run/ol@6.9.0/src/layer/Tile';\nimport { default as WMTS } from 'https://esm.run/ol@6.9.0/src/source/WMTS';\nimport { default as WMTSTileGrid } from 'https://esm.run/ol@6.9.0/src/tilegrid/WMTS';\nimport { get as getProjection } from 'https://esm.run/ol@6.9.0/src/proj';\nimport { getTopLeft, getWidth } from 'https://esm.run/ol@6.9.0/src/extent';\nimport { Circle as CircleStyle, Fill, Stroke, Style, Text, Icon } from 'https://esm.run/ol@6.9.0/src/style';\nimport { default as Map } from 'https://esm.run/ol@6.9.0/src/Map';\nimport GeoJSON from 'https://esm.run/ol@6.9.0/src/format/GeoJSON';\nimport { default as VectorSource } from 'https://esm.run/ol@6.9.0/src/source/Vector';\nimport { default as VectorLayer } from 'https://esm.run/ol@6.9.0/src/layer/Vector';\nimport WKT from 'https://esm.run/ol@6.9.0/src/format/WKT';\nimport { Control } from 'https://esm.run/ol@6.9.0/src/control';\n\n{{{ lsControlCode }}}\n\n{{{ mapGeneratorCode }}}\n\nlet config = {{{ config }}}\nlet map\nmap = new Map({\n    target: \"map\"\n})\n\nif (config.lsControlEnabled) {\n    if (!customElements.get(LocatieServerControl.name)) {\n        customElements.define(\n            LocatieServerControl.name,\n            LocatieServerControl\n        );\n    }\n    let lsControl = LocatieServerControl.createLsControl();\n    lsControl.map = map;\n    lsControl.enableLsControl(lsControl);\n}\nlet mapGenerator = new MapGenerator(config, map)\nmapGenerator.generateMap()\n",Ce='import {\n    Fill,\n    Stroke,\n    Style,\n    Text,\n    Icon,\n} from "ol/style";\nimport { default as ImageLayer } from "ol/layer/Image";\nimport { default as ImageWMS } from "ol/source/ImageWMS";\nimport { default as TileLayer } from "ol/layer/Tile";\nimport { default as WMTS } from "ol/source/WMTS";\nimport { default as WMTSTileGrid } from "ol/tilegrid/WMTS";\nimport { get as getProjection } from "ol/proj";\nimport { getTopLeft, getWidth } from "ol/extent";\nimport GeoJSON from "ol/format/GeoJSON";\nimport { default as VectorSource } from "ol/source/Vector";\nimport { default as VectorLayer } from "ol/layer/Vector";\n\nexport { MapGenerator as default };\n// DO NOT REMOVE FOLLOWING COMMENT USED FOR EXTRACTING CODE WITHOUT IMPORTS\n// CODEBODY //\nconst DEFAULT_STROKE_WIDTH = 2\nconst DEFAULT_ICON_SCALE = 1.5\nconst DEFAULT_DASHES = {\n    "dashed": {\n        lineDash: [4],\n    },\n    "dotted": {\n        lineDash: [1, 4, 1, 4],\n    },\n    "dash-dotted": {\n        lineDash: [9, 3, 3, 3],\n    },\n    "solid": {}\n}\n\nclass MapGenerator {\n    config = {}\n    map = {}\n    constructor (config, map) {\n        this.config = config\n        this.map = map\n    }\n\n    static pointStyle (layerConfig) {\n        // replace 2nd occurence in SVG - first path occurence is for white bg halo - https://stackoverflow.com/a/44568739\n        // TOOD: maybe move to generator code\n        let scale = DEFAULT_ICON_SCALE;\n        if ("iconSize" in layerConfig) {\n            scale = layerConfig.iconSize;\n        }\n        let i = 0;\n        let icon = layerConfig.svgIcon.replace(/<path/g, (match) =>\n            ++i === 2 ? `<path fill="#${layerConfig.hexColor}"` : match\n        );\n        const src = "data:image/svg+xml;utf8," + escape(icon);\n        return {\n            image: new Icon({\n                opacity: 1,\n                src: src,\n                scale: scale,\n            }),\n        };\n    }\n\n    static lineStyle (layerConfig) {\n        let colorString = `rgb(${layerConfig.color[0]},${layerConfig.color[1]},${layerConfig.color[2]})`;\n        let dash = MapGenerator.getDash(layerConfig);\n        if (!("width" in layerConfig)) {\n            layerConfig.width = DEFAULT_STROKE_WIDTH;\n        }\n        return {\n            stroke: new Stroke({\n                ...{\n                    color: colorString,\n                    width: layerConfig.width,\n                },\n                ...dash,\n            }),\n        };\n    }\n\n    static polygonStyle (layerConfig) {\n        let colorString = `rgb(${layerConfig.color[0]},${layerConfig.color[1]},${layerConfig.color[2]})`;\n        let fillColor = `rgba(${layerConfig.color[0]},${layerConfig.color[1]},${layerConfig.color[2]},0.2)`;\n        if (!("width" in layerConfig)) {\n            layerConfig.width = DEFAULT_STROKE_WIDTH;\n        }\n        let dash = MapGenerator.getDash(layerConfig);\n        return {\n            stroke: new Stroke({\n                ...{\n                    color: colorString,\n                    width: layerConfig.width,\n                },\n                ...dash,\n            }),\n            fill: new Fill({\n                color: fillColor,\n            }),\n        };\n    }\n\n    static getDash (layerConfig) {\n        let dash;\n        if (!Array.isArray(layerConfig.stroke)) {\n            dash =\n                layerConfig.stroke in DEFAULT_DASHES\n                    ? DEFAULT_DASHES[layerConfig.stroke]\n                    : DEFAULT_DASHES["solid"];\n        } else {\n            dash = {\n                lineDash: layerConfig.stroke,\n            };\n        }\n        return dash;\n    }\n\n    static getStyle (layerConfig) {\n        const styles = {\n            Point: MapGenerator.pointStyle,\n            LineString: MapGenerator.lineStyle,\n            Polygon: MapGenerator.polygonStyle,\n        };\n        console.log(\'getstyle\', layerConfig)\n        let style = styles[layerConfig.geomType];\n        if (\n            typeof layerConfig.color === "string" &&\n            layerConfig.color.split(",").length > 2\n        ) {\n            layerConfig.color = layerConfig.color.split(",");\n        }\n        return style(layerConfig);\n    }\n\n    static getStyleFunction (layerConfig) {\n        return function (feature) {\n            let symbolStyle = MapGenerator.getStyle(layerConfig);\n            if ("labels" in layerConfig && layerConfig.labels) {\n                const placementDic = {\n                    Point: {\n                        offsetX: 7,\n                        offsetY: -7,\n                        textAlign: "start",\n                        overflow: true,\n                    },\n                    Polygon: {\n                        textAlign: "center",\n                        overflow: true,\n                    },\n                    LineString: {\n                        offsetX: 6,\n                        offsetY: -6,\n                        textAlign: "start",\n                    },\n                };\n                let textStyle = {\n                    text: new Text({\n                        ...{\n                            text: feature.get(layerConfig.labelProperty),\n                            scale: 1.3,\n                            fill: new Fill({\n                                color: "#000000",\n                            }),\n                            stroke: new Stroke({\n                                color: "rgba(255, 255, 255, 0.8)",\n                                width: 3,\n                            }),\n                        },\n                        ...placementDic[layerConfig.geomType],\n                    }),\n                };\n                return new Style({\n                    ...textStyle,\n                    ...symbolStyle,\n                });\n            }\n            return new Style(symbolStyle);\n        };\n    }\n\n    static isValidHttpUrl (string) {\n        let url;\n        try {\n            url = new URL(string);\n        } catch (_) {\n            return false;\n        }\n\n        return url.protocol === "http:" || url.protocol === "https:";\n    }\n\n    static async getResourceText (filename) {\n        let response = await fetch(filename);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.text();\n    }\n    // eslint-disable-next-line no-unused-vars\n    static async getFeatureData (layerConfig) {\n        if (layerConfig.layerType === "featureLayer") {\n            let ftCollection;\n            if (layerConfig.sourceType === "url"){\n                let ftCollectionString = await MapGenerator.getResourceText(layerConfig.geoJsonUrl);\n                ftCollection = JSON.parse(ftCollectionString);\n            }else if (layerConfig.sourceType === "object"){\n                ftCollection = layerConfig.geoJson;\n            }\n            return { ftCollection: ftCollection, config: layerConfig };\n        } else {\n            // optionally retrieve metadata from service\n            return { serviceUrl: layerConfig.serviceUrl, config: layerConfig };\n        }\n    }\n\n    static postRender (e) {\n        let grayscale = e.target.get("grayscale");\n        e.context.globalCompositeOperation = "color";\n        if (e.context.globalCompositeOperation === "color") {\n            // operation is supported by browser\n            e.context.fillStyle = "rgba(255,255,255," + grayscale + ")";\n            e.context.fillRect(\n                0,\n                0,\n                e.context.canvas.width,\n                e.context.canvas.height\n            );\n        }\n        e.context.globalCompositeOperation = "source-over";\n    }\n\n    updateMapState() {\n        const view = this.map.getView();\n        const center = view.getCenter();\n        const x = parseFloat(center[0].toString());\n        const y = parseFloat(center[1].toString());\n        const z = parseInt(view.getZoom().toString());\n        const newValue = {\n          location: {\n            x: x,\n            y: y,\n            z: z,\n          },\n        };\n        Object.assign(this.config, newValue);\n    }\n\n    generateMap () {\n        let map = this.map\n        let config = this.config\n\n        const projection = getProjection("EPSG:3857");\n        const projectionExtent = projection.getExtent();\n        const size = getWidth(projectionExtent) / 256;\n        const resolutions = new Array(19);\n        const matrixIds = new Array(19);\n        for (let z = 0; z < 19; ++z) {\n            // generate resolutions and matrixIds arrays for this WMTS\n            resolutions[z] = size / Math.pow(2, z);\n            matrixIds[z] = z;\n        }\n\n        const promises = [];\n\n        config.layersString = config.layers.map((x) => JSON.stringify(x));\n        config.layers.forEach(element => {\n            promises.push(\n                MapGenerator.getFeatureData(\n                    element\n                )\n            )\n        });\n\n\n        const layers = [];\n        // resolve promises with all to maintain layer order\n\n        Promise.all(promises).then((values) => {\n            let i = 0;\n            values.forEach((result) => {\n                if (result.config.layerType === "featureLayer") {\n                    i += 1;\n                    layers.push(\n                        new VectorLayer({\n                            zIndex: i,\n                            declutter: true,\n                            source: new VectorSource({\n                                features: new GeoJSON({\n                                    featureProjection: "EPSG:3857",\n                                }).readFeatures(result.ftCollection),\n                            }),\n                            style: MapGenerator.getStyleFunction(result.config),\n                            opacity: result.config.opacity,\n                        })\n                    );\n                } else if (result.config.layerType === "serviceLayer") {\n                    i += 1;\n                    if (result.config.serviceType === "WMS") {\n                        let params = {LAYERS: result.config.layerName}\n                        if (result.config.styleName){\n                            params = {\n                                ...params,\n                                ...{ STYLES: result.config.styleName}\n                            }\n                        }\n                        layers.push(\n                            new ImageLayer({\n                                zIndex: i,\n                                source: new ImageWMS({\n                                    url: result.config.serviceUrl,\n                                    params: params, // TODO: add style parameter\n                                    ratio: 1,\n                                }),\n                                ...("grayscale" in result.config && {\n                                    grayscale: result.config.grayscale,\n                                }), // add property conditionally\n                                ...("opacity" in result.config && {\n                                    opacity: result.config.opacity,\n                                }),\n                            })\n                        );\n                    } else if (result.config.serviceType === "WMTS") {\n                        i += 1;\n                        layers.push(\n                            new TileLayer({\n                                zIndex: i,\n                                source: new WMTS({\n                                    url: result.config.serviceUrl,\n                                    layer: result.config.layerName,\n                                    matrixSet: "EPSG:3857",\n                                    format: "image/png",\n                                    projection: projection,\n                                    tileGrid: new WMTSTileGrid({\n                                        origin: getTopLeft(projectionExtent),\n                                        resolutions: resolutions,\n                                        matrixIds: matrixIds,\n                                    }),\n                                    style: "default",\n                                    wrapX: true,\n                                }),\n                                ...("grayscale" in result.config && {\n                                    grayscale: result.config.grayscale,\n                                }), // add property conditionally\n                                ...("opacity" in result.config && {\n                                    opacity: result.config.opacity,\n                                }),\n                            })\n                        );\n                    }\n                }\n            });\n            map.setLayers(layers);\n            map.getLayers().forEach((lyr) => {\n                let grayscale = lyr.get("grayscale");\n                if (grayscale > 0) {\n                    lyr.on("postrender", MapGenerator.postRender);\n                }\n            });\n            map.on("moveend", () => {\n                this.updateMapState();\n            });\n        });\n        let viewConfig = {\n            center: [564457.416, 6783258.6045],\n            zoom: 7,\n        };\n        if (config.location) {\n            viewConfig = {\n                center: [config.location.x, config.location.y],\n                zoom: config.location.z,\n            };\n        }\n\n        // eslint-disable-next-line no-unused-vars\n        // promise returning viewOptions is expected instead of View object https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html#setView\n        const viewOptions = new Promise((resolve) => {\n            resolve(viewConfig);\n        });\n        map.setView(viewOptions);\n        if (config.constrainBoundsEnabled) {\n            map.once("postrender", function () {\n                setTimeout(() => {\n                    let mapExtent = map.getView().calculateExtent(map.getSize());\n\n                    viewConfig.extent = mapExtent;\n                    const viewOptions = new Promise((resolve) => {\n                        resolve(viewConfig);\n                    });\n                    map.setView(viewOptions);\n                }, 1);\n            });\n        }\n    }\n}\n',Le="import WKT from 'ol/format/WKT'\nimport { Control } from 'ol/control'\nimport { default as VectorSource } from 'ol/source/Vector';\nimport { default as VectorLayer } from 'ol/layer/Vector';\nimport { Fill, Stroke, Style } from 'ol/style';\nexport { LocatieServerControl as default };\n// DO NOT REMOVE FOLLOWING COMMENT USED FOR EXTRACTING CODE WITHOUT IMPORTS\n// CODEBODY //\nconst LocatieServerControlCSS = `\nbutton{\n    border: solid 1px #cfd6e6;\n    border-radius: 0 3px 3px 0;\n    border-left: 0px;\n    width: 3em;\n}\n.parentControl{\n    background-color: white;\n    height: 36px;\n}\ninput{\n    outline: none;\n}\ninput[type=text]{\n    border: solid 1px #cfd6e6;\n    border-radius: 3px;\n    width: 21em;\n    padding-left: 0.5em;\n}\n\nselect{\n    border: solid 1px #cfd6e6;\n    border-radius: 3px;\n    width: 10em;\n    padding-left: 0.5em;    \n}\n\ninput[type=checkbox] {\n    transform: scale(1.1);\n}\n\ninput:focus{\n    border: solid 2px #cfd6e6 !important;\n}\n\n#locationServerControl{\n    display: flex;\n    position: absolute;\n    bottom: 2em;\n    right: 2em;\n}\n\n@media only screen and (max-width: 1024px) {\n  #locationServerControl{\n    bottom: 3em;\n    left: 0.5em;\n  }\n}\n`\nconst LocatieServerControlHTML =\n    `<div id=\"locationServerControl\" class=\"parentControl\">\n    <input autoComplete=\"off\" id=\"lsInput\" class=\"control\" type=\"text\" placeholder=\"zoek in locatieserver\" title=\"Zoek in PDOK Locatieserver\" list=\"locatie-auto-complete\">\n    <datalist id=\"locatie-auto-complete\"></datalist>\n</div>`\n\nclass LocatieServerControl extends HTMLElement {\n    static url = 'https://geodata.nationaalgeoregister.nl/locatieserver/v3'\n    static layerId = 'c2ab2649-c4c2-4ec0-bcb0-ddf9a7eb25bc'\n    static css = LocatieServerControlCSS\n    static html = LocatieServerControlHTML\n    static name = 'locatieserver-control'\n    map = {}\n    shadow = {}\n    constructor () {\n        super()\n        const _style = document.createElement('style')\n        const _template = document.createElement('template')\n        _style.innerHTML = LocatieServerControl.css\n        _template.innerHTML = LocatieServerControl.html\n        this.shadow = this.attachShadow({ mode: 'open' })\n        this.shadow.appendChild(_style)\n        this.shadow.appendChild(_template.content.cloneNode(true))\n        // note that event handles cannot be moved to seperate class method, otherwise it will not work\n        this.shadow.getElementById('lsInput').addEventListener('input', (event) => {\n            if (event.inputType === 'insertReplacementText' || event.inputType === undefined) {\n                const options = this.shadow.getElementById('locatie-auto-complete').querySelectorAll('option')\n                let id = ''\n                for (let option of options) {\n                    if (option.value === event.target.value) {\n                        id = option.id\n                    }\n                }\n                fetch(`${LocatieServerControl.url}/lookup?id=${id}&fl=id,geometrie_ll`)\n                    .then((response) => {\n                        return response.json()\n                    })\n                    .then((data) => {\n                        const wktLoc = data.response.docs[0].geometrie_ll\n                        const format = new WKT()\n                        const feature = format.readFeature(wktLoc, {\n                            dataProjection: 'EPSG:4326',\n                            featureProjection: 'EPSG:3857'\n                        })\n                        const ext = feature.getGeometry().getExtent()\n                        this.dispatchEvent(new CustomEvent('location-selected', { bubbles: true, composed: true, detail: { extent: ext, feature: feature } }))\n                        this.shadow.getElementById('locatie-auto-complete').innerHTML = ''\n                        this.shadow.getElementById('lsInput').blur()\n                    })\n            } else if (event.inputType.startsWith('deleteContent')) {\n                if (event.target.value === \"\") {\n                    this.dispatchEvent(new CustomEvent('location-cleared', { bubbles: true, composed: true, detail: {} }))\n                }\n            }\n        })\n        // note that event handles cannot be moved to seperate class method, otherwise it will not work\n        this.shadow.getElementById('lsInput').addEventListener('keyup', (event) => {\n            if (this.query === event.target.value) {\n                return\n            }\n            this.query = event.target.value\n            fetch(`${LocatieServerControl.url}/suggest?q=${this.query}`)\n                .then((response) => {\n                    return response.json()\n                })\n                .then((data) => {\n                    if (data.response.docs.length > 0) {\n                        let options = data.response.docs.map(x => `<option value=\"${x.weergavenaam}\" id=\"${x.id}\">`)\n                        let optionsHtml = options.join('')\n                        this.shadow.getElementById('locatie-auto-complete').innerHTML = optionsHtml\n                    }\n                })\n        })\n    }\n    set map (val) {\n        this.map = val;\n    }\n    static polygonStyle (config) {\n        let colorString = `rgb(${config.color[0]},${config.color[1]},${config.color[2]})`;\n        let fillColor = `rgba(${config.color[0]},${config.color[1]},${config.color[2]},0.2)`;\n        if (!(\"width\" in config)) {\n            config.width = 2;\n        }\n        return {\n            stroke: new Stroke({\n                ...{\n                    color: colorString,\n                    width: config.width,\n                },\n            }),\n            fill: new Fill({\n                color: fillColor,\n            }),\n        };\n    }\n\n    connectedCallback () {\n        this.shadow.addEventListener('keydown', (event) => {\n            event.stopPropagation()\n        })\n    }\n\n    locationClearedHandler () {\n        let existingLsLayer = this.map.getLayers().getArray().find(x => {\n            return 'values_' in x && x.values_.id === LocatieServerControl.layerId\n        })\n        if (existingLsLayer) {\n            this.map.removeLayer(existingLsLayer)\n        }\n    }\n\n    locationSelectedHandler (event) {\n        let style = LocatieServerControl.polygonStyle({ color: [255, 255, 0], stroke: \"solid\", width: 4 })\n        let ftLayer = new VectorLayer({\n            id: LocatieServerControl.layerId,\n            declutter: true,\n            source: new VectorSource({\n                features: [event.detail.feature]\n            }),\n            style: new Style(style),\n            opacity: 0.4,\n            zIndex: 9999\n        })\n        this.locationClearedHandler()\n        this.map.addLayer(ftLayer)\n        this.map.getView().fit(event.detail.extent, { maxZoom: 18, padding: [30, 30, 30, 30] })\n    }\n    static createLsControl () {\n        return document.createElement(LocatieServerControl.name)\n    }\n    enableLsControl (lsControl) {\n        let myControl = new Control({ element: lsControl })\n        this.map.addControl(myControl)\n        lsControl.addEventListener('location-selected', this.locationSelectedHandler, false)\n        lsControl.addEventListener('location-cleared', this.locationClearedHandler, false)\n    }\n}\n",Te={components:{},name:"MapControl",props:{config:Object},data:function(){return{jsTemplate:xe,htmlTemplate:Se,map:{}}},mounted:function(){this.config.generator=!0,this.updateMap()},methods:{download:function(e,t){var n=document.createElement("a");n.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},getPrepareGenPromises:function(){var e=this,t=[];return this.config.layers.forEach((function(n){"color"in n&&(n.hexColor=e.rgba2hex(n.color)),t.push(e.getFeatureDataAndIcon(n).catch((function(e){console.log(e)})))})),t},generateCode:function(){var e=this,t=this.getPrepareGenPromises();this.config.generator=!1,Promise.all(t).then((function(){e.updateMapTemplate();var t=Ce.split("// CODEBODY //\n")[1],n=Le.split("// CODEBODY //\n")[1],r={config:JSON.stringify(e.config),lsControlCode:n,mapGeneratorCode:t},o=F.a.render(xe,r),a=F.a.render(Se,Object(R["a"])({jsCode:o},e.config));e.download("index.html",a)}))},updateMapTemplate:function(){var e,t=this.config;if(console.log(t),this.$refs["map-root"].innerHTML="",e=new ie["a"]({target:this.$refs["map-root"]}),t.lsControlEnabled){customElements.get(ae.name)||customElements.define(ae.name,ae);var n=ae.createLsControl();n.map=e,n.enableLsControl(n)}var r=new we(t,e);r.generateMap()},updateMap:function(){var e=this;this.config.generator=!0;var t=this.getPrepareGenPromises();Promise.all(t).then((function(){e.config.layers.map((function(e){return console.log(e.title)})),e.updateMapTemplate()}))},isValidHttpUrl:function(e){var t;try{t=new URL(e)}catch(n){return!1}return"http:"===t.protocol||"https:"===t.protocol},rgba2hex:function(e){var t=(e&&e[4]||"").trim(),n=(256|e[0]).toString(16).slice(1)+(256|e[1]).toString(16).slice(1)+(256|e[2]).toString(16).slice(1);return""===t&&(t=1),t=(255*t|256).toString(16).slice(1),n+=t,n},getGeometryType:function(e){var t=this;return Object(E["a"])(regeneratorRuntime.mark((function n(){var r,o,a;return regeneratorRuntime.wrap((function(n){while(1)switch(n.prev=n.next){case 0:if(!t.isValidHttpUrl(e.source)){n.next=7;break}return n.next=3,t.getResourceText(e.source);case 3:o=n.sent,r=JSON.parse(o),n.next=8;break;case 7:r=e.source;case 8:return a=r.features[0].geometry.type,a=a.replace("Multi",""),n.abrupt("return",a);case 11:case"end":return n.stop()}}),n)})))()},getResourceText:function(e){return Object(E["a"])(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return t.next=2,fetch(e);case 2:if(n=t.sent,n.ok){t.next=5;break}throw new Error("HTTP error! status: ".concat(n.status));case 5:return t.next=7,n.text();case 7:return t.abrupt("return",t.sent);case 8:case"end":return t.stop()}}),t)})))()},getFeatureDataAndIcon:function(e){return Object(E["a"])(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.abrupt("return");case 1:case"end":return e.stop()}}),e)})))()},htmlEncode:function(e){var t=document.createElement("div");return t.innerText=t.textContent=e,e=t.innerHTML,e}}},ke=Te,Ee=(n("e688"),Object(x["a"])(ke,G,W,!1,null,"79d6b7e7",null)),Oe=Ee.exports,Me={components:{draggable:f.a,LayerListItem:D,MapMapControl:Oe,ServiceLayerListItem:L,FeatureLayerListItem:P},name:"MapControl",props:{config:Object},data:function(){return{jsTemplate:xe,htmlTemplate:Se,orderLayersEnabled:!1,addingServiceLayer:!1,addingFeatureLayer:!1,newLayer:{}}},mounted:function(){},beforeMount:function(){},computed:{title:{get:function(){return this.config.title},set:function(e){this.config.title=e}},layers:{get:function(){return this.config.layers},set:function(e){this.config.layers=e}},constrainBoundsEnabled:{get:function(){return this.config.constrainBoundsEnabled},set:function(e){e&&(this.config.lsControlEnabled=!1),this.config.constrainBoundsEnabled=e}},lsControlEnabled:{get:function(){return this.config.lsControlEnabled},set:function(e){this.config.lsControlEnabled=e}}},methods:{onDeleteLayer:function(e){this.layers=this.layers.filter((function(t){return t!==e})),this.updateMap()},uuid:function(){var e,t,n="";for(e=0;e<32;e++)t=16*Math.random()|0,8!=e&&12!=e&&16!=e&&20!=e||(n+="-"),n+=(12==e?4:16==e?3&t|8:t).toString(16);return n},newServiceLayer:function(){return{id:this.uuid(),serviceType:"",serviceUrl:"",layerName:"",opacity:1,grayscale:0,layerType:"serviceLayer",title:""}},newFeatureLayer:function(){return{id:this.uuid(),color:[],title:"",opacity:1,labels:!1,labelProperty:"",icon:"marker",iconSize:2,layerType:"featureLayer",sourceType:"object",geomType:"",geoJson:{},svgIcon:""}},addNewLayer:function(){this.layers.push(this.newLayer),this.addingServiceLayer?this.addingServiceLayer=!this.addingServiceLayer:this.addingFeatureLayer=!this.addingFeatureLayer,this.updateMap()},updateMap:function(){this.$refs.mapMapControl.updateMap()},generateHTML:function(){this.$refs.mapMapControl.generateCode()},action:function(e){"edit"===e&&(this.before=Object.assign([],this.layers)),"undo"===e&&(this.layers=this.before),this.editing=!this.editing}}},je=Me,Ie=(n("03f2"),Object(x["a"])(je,u,d,!1,null,"15c9e921",null)),Pe=Ie.exports,_e=n("9429"),Ue={name:"App",data:function(){return{config:_e}},mounted:function(){},components:{MapControl:Pe}},Ne=Ue,De=(n("034f"),Object(x["a"])(Ne,s,c,!1,null,null,null)),Ge=De.exports;new r["default"]({vuetify:l,render:function(e){return e(Ge)}}).$mount("#app")},"7ba5":function(e,t,n){},8501:function(e,t,n){},"85ec":function(e,t,n){},9139:function(e,t,n){},9429:function(e){e.exports=JSON.parse('{"title":"My Cool Generated Map!","constrainBoundsEnabled":false,"lsControlEnabled":true,"layers":[{"id":"4f2fc40e-4a06-4c68-accd-877db2d30695","serviceType":"WMTS","serviceUrl":"https://service.pdok.nl/brt/achtergrondkaart/wmts/v2_0?service=WMTS","layerName":"standaard","opacity":1,"grayscale":0,"layerType":"serviceLayer","title":"BRT Achtergrondkaart - Standaard"},{"id":"97a2a34f-2a37-4056-80d3-7100de4ce2f0","serviceType":"WMS","serviceUrl":"https://geodata.nationaalgeoregister.nl/cbspostcode4/wms?request=GetCapabilities&service=WMS","layerName":"postcode42015","styleName":"cbspostcode4:cbs_pc4_aantal_inwoners","opacity":1,"grayscale":0,"layerType":"serviceLayer","title":"postcode4 - postcode42015"}],"location":{"x":674103.0693749136,"y":6778624.803135729,"z":11}}')},"9be3":function(e,t,n){},"9c5d":function(e,t,n){},b5f5:function(e,t,n){"use strict";n("9139")},bb52:function(e,t,n){"use strict";n("8501")},e688:function(e,t,n){"use strict";n("7ba5")},ff2b:function(e,t,n){"use strict";n("9be3")}});
//# sourceMappingURL=app.8007b50e.js.map