import { default as ImageLayer } from 'https://esm.run/ol@6.9.0/src/layer/Image';
import { default as ImageWMS } from 'https://esm.run/ol@6.9.0/src/source/ImageWMS';
import { default as TileLayer } from 'https://esm.run/ol@6.9.0/src/layer/Tile';
import { default as WMTS } from 'https://esm.run/ol@6.9.0/src/source/WMTS';
import { default as WMTSTileGrid } from 'https://esm.run/ol@6.9.0/src/tilegrid/WMTS';
import { get as getProjection } from 'https://esm.run/ol@6.9.0/src/proj';
import { getTopLeft, getWidth } from 'https://esm.run/ol@6.9.0/src/extent';
import { Circle as CircleStyle, Fill, Stroke, Style } from 'https://esm.run/ol@6.9.0/src/style';
import { default as Map } from 'https://esm.run/ol@6.9.0/src/Map';
import GeoJSON from 'https://esm.run/ol@6.9.0/src/format/GeoJSON';
import { default as VectorSource } from 'https://esm.run/ol@6.9.0/src/source/Vector';
import { default as VectorLayer } from 'https://esm.run/ol@6.9.0/src/layer/Vector';
import { map } from './index.js';

const COLORS = {
    "black": [0,0,0],
    "silver": [192,192,192],
    "gray": [128,128,128],
    "white": [255,255,255],
    "maroon": [128,0,0],
    "red": [255,0,0],
    "purple": [128,0,128],
    "fuchsia": [255,0,255],
    "green": [0,128,0],
    "lime": [0,255,0],
    "olive": [128,128,0],
    "yellow": [255,255,0],
    "navy": [0,0,128],
    "blue": [0,0,255],
    "teal": [0,128,128],
    "aqua": [0,255,255 ]
}

function lineStyle(color){
    if (!color){
        color= 'green'
    }
    return new Style({
    stroke: new Stroke({
        color: 'green',
        width: 1,
    }),
})}

function isStandardColor(color){
    return Object.keys(COLORS).includes(color)
}

function pointStyle(color){
    if (!color){
        color= 'red'
    }
    if (isStandardColor(color)){
        color = `rgba(${COLORS[color][0]},${COLORS[color][1]},${COLORS[color][2]},0.7)`
    }else{
        color = `rgb(${color[0]},${color[1]},${color[2]},0.7)`
    }
    return new Style({
        image: new CircleStyle({
            radius: 5,
            fill: new Fill({ color: color }),
            stroke: new Stroke({ color: 'black', width: 2 }),
        }),
    })
}

function polygonStyle(color){
    if (!color){
        color= 'blue'
    }
    let fillColor = ""
    if (isStandardColor(color)){
        fillColor = `rgba(${COLORS[color][0]},${COLORS[color][1]},${COLORS[color][2]},0.2)`
    }else{
        color = `rgb(${color[0]},${color[1]},${color[2]})`
        fillColor = `rgba(${color[0]},${color[1]},${color[2]},0.2)`
    }
    return  new Style({
        stroke: new Stroke({
            color: color,
            lineDash: [4],
            width: 2,
        }),
        fill: new Fill({
            color: fillColor,
        }),
    })
}


function getStyle(geomtype, color){
    const styles = {
        'Point': pointStyle,
        'LineString': lineStyle,
        'Polygon':  polygonStyle,
    };
    let style  = styles[geomtype]
    if (color.split(',').length > 2){
        color = color.split(',')
    }
    return style(color)
}

const projection = getProjection('EPSG:3857');
const projectionExtent = projection.getExtent();
const size = getWidth(projectionExtent) / 256;
const resolutions = new Array(19);
const matrixIds = new Array(19);
for (let z = 0; z < 19; ++z) {
    // generate resolutions and matrixIds arrays for this WMTS
    resolutions[z] = size / Math.pow(2, z);
    matrixIds[z] = z;
}

const layers = [
    {{ #layers}}
    {{{layer_renderer}}}
    {{/layers}}
    {{#featureLayers}}
    new VectorLayer({
        source: new VectorSource({
            features: new GeoJSON({ featureProjection: 'EPSG:3857'}).readFeatures(
                '{{{ source }}}'
            ),
        }),
        style: getStyle( '{{ geomType }}', '{{ color }}'),
    }),
    {{/featureLayers}}
];
map.setTarget(document.getElementById('map'))
map.setLayers(layers)
// promise returning viewOptions is expected instead of View object https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html#setView

{{#location}}
let viewConfig = {
    center: [{{ x }}, {{ y }}],
    zoom: {{ z }},
}
{{/location}}
{{^location }} //default location
let viewConfig = {
    center: [564457.4160, 6783258.6045],
    zoom: 7,
}
{{/location}}


const viewOptions = new Promise((resolve, reject) => {
    resolve(
        viewConfig
    );
});
map.setView(viewOptions)

{{#constrainBoundsEnabled }}
map.once('postrender', function(event) {   
    setTimeout(() => {
        console.log("HAHHA", map)
        console.log(viewConfig)
        let mapExtent = map.getView().calculateExtent(map.getSize())
        
        viewConfig.extent = mapExtent
        const viewOptions = new Promise((resolve, reject) => {
            resolve(
                viewConfig
            );
        });
        map.setView(viewOptions)
    }, 10);
});
{{/constrainBoundsEnabled }}

function postRender (evt) {
    evt.context.globalCompositeOperation = 'color'
    if (evt.context.globalCompositeOperation === 'color') {
      // operation is supported by browser
      evt.context.fillStyle = 'rgba(255,255,255,' + 1 + ')'
      evt.context.fillRect(
        0,
        0,
        evt.context.canvas.width,
        evt.context.canvas.height
      )
    }
    evt.context.globalCompositeOperation = 'source-over'
  }

map
  .getLayers().forEach(function (lyr) {
    
    if (lyr.get('grayscale')) {
      // see comment on this answer https://stackoverflow.com/a/59819793
      lyr.on('postrender', postRender)
    }
  }
)


export { map }