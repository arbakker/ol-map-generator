import { default as ImageLayer } from 'https://esm.run/ol@6.9.0/src/layer/Image';
import { default as ImageWMS } from 'https://esm.run/ol@6.9.0/src/source/ImageWMS';
import { default as TileLayer } from 'https://esm.run/ol@6.9.0/src/layer/Tile';
import { default as WMTS } from 'https://esm.run/ol@6.9.0/src/source/WMTS';
import { default as WMTSTileGrid } from 'https://esm.run/ol@6.9.0/src/tilegrid/WMTS';
import { get as getProjection } from 'https://esm.run/ol@6.9.0/src/proj';
import { getTopLeft, getWidth } from 'https://esm.run/ol@6.9.0/src/extent';
import { Circle as CircleStyle, Fill, Stroke, Style, Text, Icon } from 'https://esm.run/ol@6.9.0/src/style';
import { default as Map } from 'https://esm.run/ol@6.9.0/src/Map';
import GeoJSON from 'https://esm.run/ol@6.9.0/src/format/GeoJSON';
import { default as VectorSource } from 'https://esm.run/ol@6.9.0/src/source/Vector';
import { default as VectorLayer } from 'https://esm.run/ol@6.9.0/src/layer/Vector';
import { map } from './index.js';

{{#lsControlEnabled}}
 /* LocatieServer Control code */
 import WKT from 'https://esm.run/ol@6.9.0/src/format/WKT'
 import { Control } from  'https://esm.run/ol@6.9.0/src/control'
 class LocatieServerControl extends HTMLElement {
     constructor () {
       super()
       const _style = document.createElement('style')
       const _template = document.createElement('template')
       this.LS_STYLE = `
       button{
           border: solid 1px #cfd6e6;
           border-radius: 0 3px 3px 0;
           border-left: 0px;
           width: 3em;
       }
       .parentControl{
           background-color: white;
           height: 36px;
       }
       input{
           outline: none;
       }
       input[type=text]{
           border: solid 1px #cfd6e6;
           border-radius: 3px;
           width: 21em;
           padding-left: 0.5em;
       }
       
       select{
           border: solid 1px #cfd6e6;
           border-radius: 3px;
           width: 10em;
           padding-left: 0.5em;    
       }
       
       input[type=checkbox] {
           transform: scale(1.1);
       }
       
       input:focus{
           border: solid 2px #cfd6e6 !important;
       }`
       this.query = ''
       _style.innerHTML = `
           ${this.LS_STYLE}
           #locationServerControl{
               display: flex;
               position: absolute;
               bottom: 0.5em;
               right: 0.5em;
           }
           @media only screen and (max-width: 1024px) {
             #locationServerControl{
               bottom: 3em;
               left: 0.5em;
             }
           }
         `
       _template.innerHTML = `
           <div id="locationServerControl" class="parentControl">
               <input autoComplete="off" id="lsInput" class="control" type="text" placeholder="zoek in locatieserver" title="Zoek in PDOK Locatieserver" list="locatie-auto-complete">
               <datalist id="locatie-auto-complete"></datalist>
           </div>
       `
       this.LOCATIE_SERVER_URL = 'https://geodata.nationaalgeoregister.nl/locatieserver/v3'
      
       this.shadow = this.attachShadow({ mode: 'open' })
       this.shadow.appendChild(_style)
       this.shadow.appendChild(_template.content.cloneNode(true))
   
       this.shadow.getElementById('lsInput').addEventListener('input', (event) => {
        

         if (event.inputType === 'insertReplacementText' || event.inputType === undefined) {
           const options = this.shadow.getElementById('locatie-auto-complete').querySelectorAll('option')
           let id = ''
           for (let option of options) {
             if (option.value === event.target.value) {
               id = option.id
             }
           }
           fetch(`${this.LOCATIE_SERVER_URL}/lookup?id=${id}&fl=id,geometrie_ll`)
             .then((response) => {
               return response.json()
             })
             .then((data) => {
               const wktLoc = data.response.docs[0].geometrie_ll
               const format = new WKT()
               const feature = format.readFeature(wktLoc, {
                 dataProjection: 'EPSG:4326',
                 featureProjection: 'EPSG:3857'
               })
               const ext = feature.getGeometry().getExtent()
               this.dispatchEvent(new CustomEvent('location-selected', { bubbles: true, composed: true, detail: { extent: ext, feature: feature } }))
               this.shadow.getElementById('locatie-auto-complete').innerHTML = ''
               this.shadow.getElementById('lsInput').blur()
             })
         }else if (event.inputType.startsWith('deleteContent')){
            if ( event.target.value===""){
                this.dispatchEvent(new CustomEvent('location-cleared', { bubbles: true, composed: true, detail: { } }))
            }
         } 
       })
   
       this.shadow.getElementById('lsInput').addEventListener('keyup', (e) => {
         if (this.query === e.target.value) {
           return
         }
         this.query = e.target.value
         fetch(`${this.LOCATIE_SERVER_URL}/suggest?q=${this.query}`)
           .then((response) => {
             return response.json()
           })
           .then((data) => {
             if (data.response.docs.length > 0) {
               let options = data.response.docs.map(x => `<option value="${x.weergavenaam}" id="${x.id}">`)
               let optionsHtml = options.join('')
               this.shadow.getElementById('locatie-auto-complete').innerHTML = optionsHtml
             }
           })
       })
     }
     connectedCallback () {
       this.shadow.addEventListener('keydown', (event) => {
         event.stopPropagation()
       })
     }
   }
 if (!customElements.get('locatieserver-control')){
    customElements.define('locatieserver-control', LocatieServerControl)
 }

 const lsControl = document.createElement('locatieserver-control')
 const LS_LAYER_ID = 'lsControlLayer'
function removeLsLayer(){
    let existingLsLayer = map.getLayers().getArray().find(x=> {
        return  'values_' in x && x.values_.id === LS_LAYER_ID
    })
    if (existingLsLayer){
        map.removeLayer(existingLsLayer)
    }
}

 function locationSelectedHandler (event) {
    let style = polygonStyle({color: COLORS["yellow"], stroke: "solid", width: 4 })
    let ftLayer = new VectorLayer({
        id: LS_LAYER_ID,
        declutter: true,
        source: new VectorSource({
            features: [event.detail.feature]
        }),
        style: new Style(style),
        opacity: 0.4
    })
    removeLsLayer()
    map.addLayer(ftLayer)
    map.getView().fit(event.detail.extent, { maxZoom: 18, padding: [30,30,30,30] })
 }

 function locationClearedHandler () {
    removeLsLayer()
 }

 function enableLsControl () {
     let myControl = new Control({ element: lsControl })
     map.addControl(myControl)
     lsControl.addEventListener('location-selected', locationSelectedHandler, false)
     lsControl.addEventListener('location-cleared', locationClearedHandler, false)
 }
 /* LocatieServer Control code */
 {{/lsControlEnabled}}

const COLORS = {
    "black": [0, 0, 0],
    "silver": [192, 192, 192],
    "gray": [128, 128, 128],
    "white": [255, 255, 255],
    "maroon": [128, 0, 0],
    "red": [255, 0, 0],
    "purple": [128, 0, 128],
    "fuchsia": [255, 0, 255],
    "green": [0, 128, 0],
    "lime": [0, 255, 0],
    "olive": [128, 128, 0],
    "yellow": [255, 255, 0],
    "navy": [0, 0, 128],
    "blue": [0, 0, 255],
    "teal": [0, 128, 128],
    "aqua": [0, 255, 255]
}

function lineStyle (config) {
    let colorString = `rgb(${config.color[0]},${config.color[1]},${config.color[2]})`
    let dash = getDash(config)
    return {
        stroke: new Stroke(
            {
                ...{
                    color: colorString,
                    width: config.width,
                },
                ...dash
            }
     )
    }

}

function pointStyle (config) {
    // replace 2nd occurence - first path occurence is for white bg halo - https://stackoverflow.com/a/44568739
    // TOOD: maybe replace to generator code
    let scale = 1.5
    if ('iconSize' in config){
        scale = config.iconSize
    }
    let i = 0
    let icon = config.svgIcon.replace(/<path/g, match => ++i === 2 ? `<path fill="#${config.hexColor}"` : match)
    const src = 'data:image/svg+xml;utf8,' + escape(icon)
    return {
        image: new Icon({
            opacity: 1,
            src: src,
            scale: scale,
        })
    }
}

function getDash(config){
    const dashDic =  {
        dashed: {
            lineDash: [4]
        },
        solid : {
        },
        dotted: {
            lineDash: [1, 4, 1, 4]
        },
        "dash-dotted":{
            lineDash: [9, 3, 3, 3]
        }
    }
    let dash
    if (!(config.stroke.includes(','))){
        dash = dashDic[config.stroke]
    }else{
        dash = {
            lineDash: config.stroke.split(',')
        }
    }
    return dash
}

function polygonStyle (config) {
    // TODO: fix default colors in generator code
    let colorString = `rgb(${config.color[0]},${config.color[1]},${config.color[2]})`
    let fillColor = `rgba(${config.color[0]},${config.color[1]},${config.color[2]},0.2)`
    if (!("stroke" in config)){
        config.stroke="dashed"
    }
    if (!("width" in config)){
        config.width=2
    }
    let dash = getDash(config)
    return {
        stroke: new Stroke(
            {
                ...{
                    color: colorString,
                    width: config.width,
                },
                ...dash
            }
        ),
        fill: new Fill({
            color: fillColor,
        }),
    }
}

function getStyle (config) {
    const styles = {
        'Point': pointStyle,
        'LineString': lineStyle,
        'Polygon': polygonStyle,
    };
    let style = styles[config.geomType]
    if ( typeof config.color === 'string' && config.color.split(',').length > 2) {
        config.color = config.color.split(',')
    }
    return style(config)
}

function getStyleFunction (config) {
    return function (feature, resolution) {
        let symbolStyle = getStyle(config)
        if ("labels" in config && config.labels) {
            const placementDic = {
                "Point": {
                    offsetX: 7,
                    offsetY: -7,
                    textAlign: 'start',
                    overflow: true
                },
                "Polygon": {
                    textAlign: 'center',
                    overflow: true
                },
                "LineString": {
                    offsetX: 6,
                    offsetY: -6,
                    textAlign: 'start',
                }
            }
            let textStyle = {
                text: new Text(
                    {
                        ...{
                            text: feature.get(config.labelProperty),
                            scale: 1.3,
                            fill: new Fill({
                                color: '#000000'
                            }),
                            stroke: new Stroke({
                                color: 'rgba(255, 255, 255, 0.8)',
                                width: 3
                            })
                        },
                        ...placementDic[config.geomType]
                    }
                )
            }
            return new Style(
                {
                    ...textStyle,
                    ...symbolStyle
                }
            )
        }
        return new Style(symbolStyle)
    }
}

function isValidHttpUrl (string) {
    let url;

    try {
        url = new URL(string);
    } catch (_) {
        return false;
    }

    return url.protocol === "http:" || url.protocol === "https:";
}

const projection = getProjection('EPSG:3857');
const projectionExtent = projection.getExtent();
const size = getWidth(projectionExtent) / 256;
const resolutions = new Array(19);
const matrixIds = new Array(19);
for (let z = 0; z < 19; ++z) {
    // generate resolutions and matrixIds arrays for this WMTS
    resolutions[z] = size / Math.pow(2, z);
    matrixIds[z] = z;
}

async function getResourceText (filename) {
    let response = await fetch(filename);
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.text();
}

async function getFeatureData (source, config) {
    let ftCollection
    if (isValidHttpUrl(source)){
        let ftCollectionString = await getResourceText(source)
        ftCollection = JSON.parse(ftCollectionString)
    }else{
        ftCollection = source
    }
    return {ftCollection: ftCollection, config: config}
}

function postRender (evt) {
    evt.context.globalCompositeOperation = 'color'
    if (evt.context.globalCompositeOperation === 'color') {
        // operation is supported by browser
        evt.context.fillStyle = 'rgba(255,255,255,' + 1 + ')'
        evt.context.fillRect(
            0,
            0,
            evt.context.canvas.width,
            evt.context.canvas.height
        )
    }
    evt.context.globalCompositeOperation = 'source-over'
}

const layers = [];
// service layers rendered with custom renderer
{{ #layers}}
layers.push({{{layer_renderer}}})
{{/layers}}

const promises = [];
{{#featureLayers}}
promises.push(
    getFeatureData(
        {{{ source }}},
        {
            ...{"color": '{{ color }}', "hexColor": '{{ hexColor }}', "geomType": '{{ geomType }}'},
            {{#width}}
            ...{"width": '{{{ width }}}'},
            {{/width}}
            {{#labels}}
            ...{"labels": {{ labels }}, "labelProperty": '{{ labelProperty }}'},
            {{/labels}}
            {{#icon}}
            ...{"svgIcon": '{{{ svgIcon }}}'},
            {{/icon}}
            {{#iconSize}}
            ...{"iconSize": '{{{ iconSize }}}'},
            {{/iconSize}}
            {{#stroke}}
            ...{"stroke": '{{{ stroke }}}'},
            {{/stroke}}
            {{#opacity}}
            ...{"opacity": {{ opacity }} },
            {{/opacity}}
        }    
    )
)
{{/featureLayers}}

// resolve promises with all to maintain layer order
Promise.all(promises).then((values) => {
    values.forEach(result => {
        layers.push(new VectorLayer({
            declutter: true,
            source: new VectorSource({
                features: new GeoJSON({ featureProjection: 'EPSG:3857' }).readFeatures(result.ftCollection),
            }),
            style: getStyleFunction(result.config),
            opacity: result.config.opacity,
        })
        )
    })
    map.setLayers(layers)
    map
        .getLayers().forEach(lyr => {

            if (lyr.get('grayscale')) {
                // see comment on this answer https://stackoverflow.com/a/59819793
                lyr.on('postrender', postRender)
            }
        }
        )
});

map.setTarget(document.getElementById('map'))
// promise returning viewOptions is expected instead of View object https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html#setView

{{#location}}
let viewConfig = {
    center: [{{ x }}, {{ y }}],
    zoom: {{ z }},
}
{{/location}}
{{^location }} //default location
let viewConfig = {
    center: [564457.4160, 6783258.6045],
    zoom: 7,
}
{{/location}}

const viewOptions = new Promise((resolve, reject) => {
    resolve(
        viewConfig
    );
});
map.setView(viewOptions)

{{#constrainBoundsEnabled }}
map.once('postrender', function(event) {   
    setTimeout(() => {
        let mapExtent = map.getView().calculateExtent(map.getSize())
        
        viewConfig.extent = mapExtent
        const viewOptions = new Promise((resolve, reject) => {
            resolve(
                viewConfig
            );
        });
        map.setView(viewOptions)
    }, 10);
});
{{/constrainBoundsEnabled }}




if (typeof enableLsControl === 'function'){
    enableLsControl()
}
    
export { map }
